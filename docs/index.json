[{"authors":null,"categories":null,"content":"Matheus Eduardo Garbelini was born in Curitiba city, Brazil. In November 2018, he graduated with a bachelor of engineering degree in Electronics from Pontifical Catholic University of Paraná in Brazil. Currently Matheus is integrant of ASSET Research Group at Singapore University of Technology and Design (SUTD), as a first year PhD student. His supervisor is Assistant Professor Sudipta Chattopadhyay.\n  Download my CV.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1511300822,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Matheus Eduardo Garbelini was born in Curitiba city, Brazil. In November 2018, he graduated with a bachelor of engineering degree in Electronics from Pontifical Catholic University of Paraná in Brazil. Currently Matheus is integrant of ASSET Research Group at Singapore University of Technology and Design (SUTD), as a first year PhD student.","tags":null,"title":"Matheus Eduardo Garbelini","type":"authors"},{"authors":["M. E. Garbelini","C. Wang","S. Chattopadhyay","S Sumei","E Kurniawan"],"categories":null,"content":"","date":1594944e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"e2bfdfc137d05ffdc1c4ce9eb877474c","permalink":"/publication/sweyntooth/","publishdate":"2020-07-17T00:00:00Z","relpermalink":"/publication/sweyntooth/","section":"publication","summary":"We have developed a systematic and comprehensive testing framework, which, as an automated and general-purpose approach, can effectively fuzz any BLE protocol implementation. Our framework runs in a central device and tests a BLE device when the latter gets connected to the central as a peripheral. Our framework incorporates a state machine model of the suite of BLE protocols and monitors the peripheral’s state through its responses. As of the date of publication, we have tested 12 devices from eight vendors and four IoT products, with a total of 11 new vulnerabilities discovered and 13 new Common Vulnerability Exposure (CVE) IDs assigned. We call such a bunch of vulnerabilities as SWEYNTOOTH, which highlights the efficacy of our framework.","tags":null,"title":"SweynTooth: Unleashing Mayhem over Bluetooth Low Energy","type":"publication"},{"authors":["Matheus Eduardo Garbelini"],"categories":["Vulnerability Disclosure"],"content":"Vulnerability Description The vulnerability (CVE-2019-12586) found in SDKs of ESP32 and ESP8266 allows an attacker to precisely cause a crash in any ESP32/ESP8266 connected to an enterprise network. In combination with the Zero PMK Installation vulnerability, it could increase the damages to any unpatched device.\nThe affected stable and development versions are listed below:\n ESP32-IDF Stable release 3.0 and earlier. Vulnerable until July 15, 2019. ESP32-IDF Development Master #b68f5b4f and earlier. Vulnerable until May 30, 2019. Arduino-ESP32 Pre-release 1.0.3-rc2 and earlier. Vulnerable until September 5, 2019. Arduino-ESP32 Development Master #aff2e42 and earlier. Vulnerable until May 12, 2019.  Exploit scenario ​\tThe DoS vulnerability can be better understood when presented in the following diagram below. Step 8 is the malicious message which could be injected by an attacker in radio range. In this case, if the ESP32/8266 Wi-Fi client receives a EAP-Success message just after starting the EAP procedure, it crashes immediately. This happens because the device is erroneously tries to finish the EAP procedure, but doesn\u0026rsquo;t have a valid PMK exchanged and validated.\nA Wireshark capture (download) of the attacker triggering the crash is shown in the figure below:\nImpact This vulnerability allows attackers in radio range to trigger a crash to any ESP device connected to an enterprise network. As the respective devices SDK (ESP-IDF for ESP32 and NONOS-SDK for ESP8266) enables watchdog by default, the devices won\u0026rsquo;t hang in face of such DoS attack. Espressif has fixed such problem and committed patches for ESP32 SDK, however, as of the date of this post, the NONOS SDK and Arduino core for ESP8266 are still unpatched.\nPatches Espressif has fixed such problem and committed patches for ESP32 SDK, however, as of the date of this post, the NONOS SDK and Arduino core for ESP8266 appears to be unpatched. The security patches can be tracked in the following commit link:\n ESP32 ESP-IDF Stable Release 3.3 (5 September, 2019) ESP32 ESP-IDF Development Master (30 May, 2019) Arduino-ESP32 Stable Release 1.0.3 RC3 (5 September, 2019) Arduino-ESP32 Development Master (August 20, 2019)  Proof of Concept tool If you wish to test your ESP32/8266 device against this vulnerability, you can check my repository:\nhttps://github.com/Matheus-Garbelini/esp32_esp8266_attacks\n","date":1567481506,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"0a3875537a9a1cf7ce6f69419e5ec3e0","permalink":"/post/esp32-esp8266-eap-crash/","publishdate":"2019-09-03T11:31:46+08:00","relpermalink":"/post/esp32-esp8266-eap-crash/","section":"post","summary":"Crashing ESP devices connected to enterprise networks","tags":["ESP32","ESP8266","Arduino"],"title":"ESP32/ESP8266 EAP client crash (CVE-2019-12586)","type":"post"},{"authors":["Matheus Eduardo Garbelini"],"categories":["Vulnerability Disclosure"],"content":"Vulnerability Description CVE-2019-12588: The client 802.11 MAC implementation in Espressif ESP8266 NONOS SDK 3.0 and earlier does not validate correctly the RSN AuthKey suite list count in beacon frames, probe responses, and association responses, which allows attackers in radio range to cause a denial of service (crash) via a crafted message.\nThe affected stable and development versions are listed below:\n NONOS SDK Stable release 3.0 and earlier. Vulnerable until July 15, 2019. NONOS SDK Development master #b2db392 and earlier. Vulnerable until July 3, 2019. NONOS SDK Backport 2.2.X #9fe634e and earlier. Vulnerable until July 3, 2019. NONOS SDK Backport 3.0.0 #fc04170 and earlier. Vulnerable until July 3, 2019. Arduino ESP8266 Release 2.5.2 and earlier. Still vulnerable as of September 5, 2019. Arduino ESP8266 Development master #a0634a7. Vulnerable until July 5, 2019.  Two situations in a malformed beacon frame can trigger this problem:\n When sending crafted 802.11 frames with the field Auth Key Management Suite Count (AKM) in RSN tag with size too large or incorrect, ESP8266 in station mode crashes. When sending crafted 802.11 frames with the field Pairwise Cipher Suite Count in RSN tag with size too large or incorrect, ESP8266 in station mode crashes.  Exploitation Scenario The vulnerability can be better understood when presented in the following diagram:\nIn the scenario above, the attacker sends a malformed beacon or probe response to a ESP8266 which is already connected to an access point. However, it was found that ESP8266 can crash even when there\u0026rsquo;s no connection to a AP, that is even when ESP8266 is just scanning for the AP.\nWhen capturing some packets in Wireshark, it\u0026rsquo;s easy to see which fields are affected. As shown in the figure below, the affected field is the Auth Key Mangement (AKM) Suite Count.\nIn this case, NONOS SDK is not verifying correctly AKM Suite count field against unexpected valued. This AKM field is used to tell how many authentication methods (suites) are allowed to be used during the key exchange with the AP.\nAs for the Pairwise Cipher Suite Count field, which tells the client how many methods can be used for encryption, a crash also occurs when the count number is higher then expected. This is exemplified in the figure below.\nIn both cases, ESP8266 NONOS SDK is not expecting to receive an exceeding value (6 and 10 in this case). This indicates that this attack may be triggering a buffer overflow. You can download the capture example of such crafted packet here.\nImpact As mentioned before, an attacker can crash any ESP8266 Wi-Fi client within radio range by just creating a fake beacon frame or probe response. This is specially dangerous for projects that are using ESP8266 for automation (e.g. openplc project) which relies in operating actuators such as relays and motors while continuously communication with a programmable logic controller (PLC). In addition, products and projects that uses ESP8266 for smart home or as AT device are mostly vulnerable if their firmware was not recently updated.\nPatches Espressif has fixed such problem and committed patches in their NONOS SDK repository since July 3, 2019. The specific security patches can be tracked in the following commit/release links:\n NONOS SDK Stable release 3.0.1 (July 15, 2019)   NONOS SDK Development master (July 3, 2019) NONOS SDK Backport 2.2.X (July 3, 2019) NONOS SDK Backport 3.0.0 (July 3, 2019) Arduino ESP866 Development Master (July 5, 2019)  Make sure to update your SDK today, don\u0026rsquo;t delay.\nProof of Concept tool If you wish to test your ESP8266 device against this vulnerability, you can check my repository:\nhttps://github.com/Matheus-Garbelini/esp32_esp8266_attacks\n","date":1567481489,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"b4ba48cf0ac13535a05fcf6f66a25d27","permalink":"/post/esp8266-beacon-frame-crash/","publishdate":"2019-09-03T11:31:29+08:00","relpermalink":"/post/esp8266-beacon-frame-crash/","section":"post","summary":"Easily crashing ESP8266 Wi-Fi devices","tags":["ESP8266","Arduino"],"title":"ESP8266 Beacon Frame Crash (CVE-2019-12588)","type":"post"},{"authors":["Matheus Eduardo Garbelini"],"categories":["Vulnerability Disclosure"],"content":"Vulnerability Description The vulnerability (CVE-2019-12587) found in SDKs of ESP32 and ESP8266 allows an attacker to take control of the Wi-Fi device in a enterprise network by sending an EAP-Fail message in the final step during connection between the device and the access point (AP). It was discovered that ESP32/ESP8266 devices updates their Pairwise Master Key (PMK) only when they receive an EAP-Success message. If an EAP-Fail message is received before the EAP-Success, the device skips updating the PMK received during a normal EAP exchange (EAP-PEAP, EAP-TTLS or EAP-TLS). Even in such situation, the device accepts normally the EAPoL 4-Way handshake which in turn establishes a session key based on this PMK.\nEach time ESP32/ESP8266 starts, the PMK is initialised as zero, thus, if an EAP-Fail message is sent before the EAP-Success, the device uses a zero PMK. This allows an attacker to hijack the connection between the AP and the device.\nThe affected stable and development versions are listed below:\n ESP32-IDF Stable release 3.0 and earlier. Vulnerable until July 15, 2019. ESP32-IDF Development Master #b68f5b4f and earlier. Vulnerable until May 30, 2019. Arduino-ESP32 Pre-release 1.0.3-rc2 and earlier. Vulnerable until September 5, 2019. Arduino-ESP32 Development Master #aff2e42 and earlier. Vulnerable until May 12, 2019.  Exploitation scenario ​\tThe vulnerability can be better understood when presented in the diagram of the figure below. At the end of the exploit, the attacker has control over the encrypted Wi-Fi session of ESP32/ESP8266.\nA Wireshark capture (download) of the attacker triggering the vulnerability is shown in the figure below.\nThe highlighted packet (Failure) is sent by the attacker, which then proceeds to send a Message 1, generated with a PMK (or pre-shared key) equal to zero. As you can see, the client normally responds with message 3 and 4 during the EaPoL handshake. Wi-Fi devices that are not vulnerable simply ignores such failure message and respond only when they received a valid message 1 from the real AP instead.\nImpact Attackers can exploit this vulnerability to hijack ESP32/ESP8266 Wi-Fi clients connected to enterprise network without even knowing anything about username, password or certificates used during the enterprise keys exchanging methods (EAP-PEAP, EAP-TTLS or EAP-TLS). This allows an attackers in radio range to replay, decrypt, or spoof frames via a rogue access point, thus facilitating stealing of session keys/ usernames/passwords if communications betwen ESP an AP are not using TLS. This practically means that unpatched ESP devices are more secure by actually using just WPA2 Personal.\nIt\u0026rsquo;s important to mention that attackers can also exploit CVE-2019-12586 and CVE-2019-12588 to force both ESP32 and ESP8266 to crash, which reinitialise the PMK to zero again.\nPatches Espressif has fixed such problem and committed patches for ESP32 SDK, however, as of the date of this post, the NONOS SDK and Arduino core for ESP8266 appears to be unpatched. The security patches can be tracked in the following commit link:\n ESP32 ESP-IDF Stable Release 3.3 (5 September, 2019) ESP32 ESP-IDF Development Master (30 May, 2019) Arduino-ESP32 Stable Release 1.0.3 RC3 (5 September, 2019) Arduino-ESP32 Development Master (August 20, 2019)  Proof of Concept tool If you wish to test your ESP32/8266 device against this vulnerability, you can check my repository:\nhttps://github.com/Matheus-Garbelini/esp32_esp8266_attacks\n","date":1567479251,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"8a600d25e4bda10cbf19a1d49a4baf03","permalink":"/post/zero-pmk-installation/","publishdate":"2019-09-03T10:54:11+08:00","relpermalink":"/post/zero-pmk-installation/","section":"post","summary":"Hijacking ESP32/ESP8266 clients connected to enterprise networks","tags":["ESP32","ESP8266","Arduino"],"title":"Zero PMK Installation (CVE-2019-12587)","type":"post"},{"authors":["M. E. Garbelini","C. Wang","S. Chattopadhyay"],"categories":null,"content":"","date":1565049600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"ae583450d69b0388aacb2227ebdabd31","permalink":"/publication/greyhound/","publishdate":"2019-08-06T00:00:00Z","relpermalink":"/publication/greyhound/","section":"publication","summary":"The recent rise in complex Wi-Fi vulnerabilities indicates the critical need for effective Wi-Fi protocol testing tools. We present a directed fuzzing methodology named GREYHOUND that automatically tests the Wi-Fi client implementations against vulnerabilities like crashes or non-compliant behaviours. Leveraging a holistic Wi-Fi protocol model, GREYHOUND directs the fuzzer in specific states of target Wi-Fi client. By exchanging mutated packets with a Wi-Fi client, GREYHOUND aims to induce the client to exhibit anomalous behaviours that badly deviate from Wi-Fi protocols. We have implemented GREYHOUND and evaluated it on a variety of real-world Wi-Fi clients, including smartphone, Raspberry Pi, IoT device microcontrollers and a medical device. Our evaluation indicates that GREYHOUND not only automatically discovers known vulnerabilities (including KRACK and Dragonslayer) that would require specialized verification otherwise, but, more importantly, it also has uncovered four new vulnerabilities in popular Wi-Fi clients. All discovered vulnerabilities are confirmed by manufacturers and assigned three different common vulnerability exposures. Furthermore, our evaluation with three existing Wi-Fi fuzz testing tools reveals that they fail to discover any of the vulnerabilities uncovered by GREYHOUND. Last but not the least, we have deployed GREYHOUND to discover KRACK and DragonSlayer within the Wi-Fi client implementation of automotive head units.","tags":null,"title":"GREYHOUND: Directed Greybox Wi-Fi Fuzzing","type":"publication"},{"authors":["Matheus Garbelini"," Reynoso-Meza"],"categories":null,"content":"","date":1506816e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"4b5077552120814c7ceff4afa553e088","permalink":"/publication/garbelini-matheus-2017-multiobjectiveeo/","publishdate":"2019-09-03T04:28:55.453621Z","relpermalink":"/publication/garbelini-matheus-2017-multiobjectiveeo/","section":"publication","summary":"Longitudinal control tuning is one of the principal tasks in the control system of an aircraft as its pitch movement is affected by different flight conditions and most of the times, aggressive environment. In order to get a better flight stability, multi-objective evolutionary optimization techniques can be applied to the tuning procedure in order to depict the trade-off between conflicting objectives. In this paper, we use such techniques to appreciate the trade-off of the aircraft longitudinal angle response. We compare two different algorithms in a four-objective problem that lead longitudinal movement control trough a standard proportional-integralderivative (PID) controller. Keywords— Multi-objective optimization, PID controller, Longitudinal movement.","tags":null,"title":"Multi-Objective Evolutionary Optimization PID Tuning for Longitudinal Movement of an Aircraft","type":"publication"},{"authors":["Matheus Garbelini","Victor Alves Ribeiro","Gilberto Reynoso-Meza","Leandro Coelho"],"categories":null,"content":"","date":1443657600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"31a689c61d56d413425c4f6faecfa4aa","permalink":"/publication/garbelini-sbai-2015/","publishdate":"2019-09-03T03:51:45.731359Z","relpermalink":"/publication/garbelini-sbai-2015/","section":"publication","summary":"Yaw and pitch control tuning are an usual task (and requirement) for the autonomous flight control device in Unmanned Aerial Systems (UAS), in order to get a desired performance and stability. Multiobjective optimisation techniques can be integrated into the tuning procedure of different processes. They are useful due to its capabilities to depict trade-off between conflicting objectives. In this work, we use such optimisation techniques, in order to appreciate the trade-off between performance and reliability in UAS. For such purpose, different PID controllers are tuned for a two degree of freedom helicopter model, in order to validate its usability.","tags":null,"title":"Yaw and pitch control tuning using multiobjective optimisation techniques","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1511300822,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]